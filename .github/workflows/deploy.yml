name: Deploy RPlayer

on:
  # Manual trigger only for more control
  workflow_dispatch:
    inputs:
      deploy_type:
        description: 'What to deploy'
        required: true
        default: 'site'
        type: choice
        options:
          - site
          - lib-and-npm

# Allow this job to clone the repo and create a page deployment
permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Run linting
        run: npm run lint || echo "Linting issues found"

      - name: Run tests
        run: npm test || echo "No tests available"

  build-lib:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_type == 'lib-and-npm'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Cache library build
        id: lib-cache-npm
        uses: actions/cache@v3
        with:
          path: ./lib
          key: ${{ runner.os }}-lib-${{ hashFiles('src/lib/**') }}-${{ hashFiles('package-lock.json') }}

      - name: Build library (ES and UMD modules)
        if: steps.lib-cache-npm.outputs.cache-hit != 'true'
        run: npm run build:lib

      - name: Check version and update if needed
        id: version
        run: |
          CURRENT_VERSION=$(npm view @davland7/rplayer version || echo "0.0.0")
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          echo "Current published version: $CURRENT_VERSION"
          echo "Package version: $PACKAGE_VERSION"
          if [ "$CURRENT_VERSION" = "$PACKAGE_VERSION" ]; then
            echo "::warning::Version $PACKAGE_VERSION already published. Consider updating version in package.json"
            echo "needs_publish=false" >> $GITHUB_OUTPUT
          else
            echo "New version detected: $PACKAGE_VERSION"
            echo "needs_publish=true" >> $GITHUB_OUTPUT
          fi

      - name: Publish to npm
        if: steps.version.outputs.needs_publish == 'true'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  build-site:
    needs: test
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_type == 'site'
    env:
      PUBLIC_FORMSPREE_FORM_ID: ${{ vars.PUBLIC_FORMSPREE_FORM_ID }}
      PUBLIC_GOOGLE_ANALYTICS_ID: ${{ vars.PUBLIC_GOOGLE_ANALYTICS_ID }}
      PUBLIC_RECAPTCHA_SITE_KEY: ${{ vars.PUBLIC_RECAPTCHA_SITE_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
          cache: 'npm'
          cache-dependency-path: 'package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Cache library build
        id: lib-cache-pages
        uses: actions/cache@v3
        with:
          path: ./lib
          key: ${{ runner.os }}-lib-${{ hashFiles('src/lib/**') }}-${{ hashFiles('package-lock.json') }}

      - name: Build library (ES and UMD modules)
        if: steps.lib-cache-pages.outputs.cache-hit != 'true'
        run: npm run build:lib

      - name: Cache Astro dependencies
        uses: actions/cache@v3
        with:
          path: |
            ./.astro
            ./node_modules/.vite
          key: ${{ runner.os }}-astro-${{ hashFiles('src/**') }}-${{ hashFiles('package-lock.json') }}

      - name: Build Astro site
        run: npm run build

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  deploy-site:
    needs: build-site
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_type == 'site'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
        with:
          timeout: 600000 # 10 minutes in milliseconds
