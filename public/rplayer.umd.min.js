(function(y,p){typeof exports=="object"&&typeof module<"u"?p(exports,require("hls.js")):typeof define=="function"&&define.amd?define(["exports","hls.js"],p):(y=typeof globalThis<"u"?globalThis:y||self,p(y.RPlayer={},y.Hls))})(this,function(y,p){"use strict";function L(s,e){if(p.isSupported()){const t={abrEwmaDefaultEstimate:5e4,maxBufferLength:60,maxMaxBufferLength:120,maxBufferSize:6e7,fragLoadingTimeOut:2e4,fragLoadingMaxRetry:4,fragLoadingRetryDelay:500,levelLoadingTimeOut:1e4,levelLoadingMaxRetry:4,levelLoadingRetryDelay:500},n=new p(t);return n.loadSource(e),n.attachMedia(s),n.on(p.Events.MANIFEST_PARSED,()=>{const o=s.play();o!==null&&o.catch(i=>{a.warn(`HLS playback failed: ${i.message}`)})}),n.on(p.Events.ERROR,(o,i)=>{if(a.error(`HLS Error: Type ${i.type} - Details: ${i.details}`),i.fatal)switch(i.type){case p.ErrorTypes.NETWORK_ERROR:a.info("Fatal network error, attempting recovery..."),n.startLoad();break;case p.ErrorTypes.MEDIA_ERROR:a.info("Fatal media error, attempting recovery..."),n.recoverMediaError();break;default:a.info("Unrecoverable fatal error, destroying HLS instance."),n.destroy();break}}),n}else s.canPlayType("application/vnd.apple.mpegurl")?(a.info("HLS.js is not supported, but native HLS playback is possible (e.g., Safari)."),s.src=e,s.addEventListener("loadedmetadata",()=>{a.info("Playing HLS stream using native support."),s.play().catch(t=>{a.warn("Autoplay was blocked by the browser.",t)})})):a.error("HLS is not supported in this browser.")}async function E(s,e){try{if(a.info(`Fetching M3U playlist from: ${e}`),!e.startsWith("http://")&&!e.startsWith("https://")){const o=window.location.origin;e.startsWith("/")?e=o+e:e=o+"/"+e.replace(/^\.\//,""),a.info(`Local file detected, using absolute URL: ${e}`)}const t=new AbortController,n=setTimeout(()=>t.abort(),1e4);try{const o=await fetch(e,{signal:t.signal,mode:"cors",credentials:"same-origin"});if(clearTimeout(n),!o.ok)throw new Error(`Failed to fetch M3U playlist: ${o.status}`);const i=await o.text();a.info(`M3U content fetched, size: ${i.length} bytes`);const d=i.split(`
`),l=[];let u="";for(let g=0;g<d.length;g++){const c=d[g].trim();if(!c)continue;if(c.startsWith("#EXTINF:")){const w=c.split(",");w.length>=2&&(u=w.slice(1).join(",").trim());continue}if(c.startsWith("#"))continue;let f=c;if(!c.match(/^(https?:\/\/|rtmp:\/\/|rtsp:\/\/)/i))try{const w=new URL(e);f=new URL(c,w.href).href}catch(w){a.warn(`Could not resolve relative URL: ${c}`,w)}(f.match(/\.(mp3|aac|ogg|opus|wav|m4a)$/i)||f.includes("audio")||f.includes("livestream")||f.includes("stream")||f.includes("radio")||!f.includes("video")&&!f.match(/\.(mp4|mkv|avi|mov|flv|wmv)$/i))&&l.push({url:f,title:u||`Track ${l.length+1}`}),u=""}if(a.info(`Found ${l.length} audio URLs in playlist`),l.length===0)throw new Error("No audio URLs found in M3U playlist");const h=l[0];return a.info(`Found first entry in M3U playlist: ${h.title} (${h.url})`),typeof window<"u"&&(window.__currentM3UPlaylist=l,window.__currentM3UIndex=0),s instanceof HTMLAudioElement&&(s.__trackTitle=h.title||"",s.__trackSource="M3U Playlist"),h.url}catch(o){throw a.error("Error fetching M3U playlist:",o),new Error(`Timeout or network error fetching playlist: ${o instanceof Error?o.message:String(o)}`)}}catch(t){throw a.error("Error playing M3U playlist:",t),new Error(`Failed to play M3U playlist: ${t instanceof Error?t.message:String(t)}`)}}async function H(){const s=window.__currentM3UPlaylist||[];if(!s.length)throw new Error("No playlist available");const t=((window.__currentM3UIndex||0)-1+s.length)%s.length;window.__currentM3UIndex=t;const n=s[t];return a.info(`Moving to previous track: ${n.title}`),n.url}async function b(){const s=window.__currentM3UPlaylist||[];if(!s.length)throw new Error("No playlist available");const t=((window.__currentM3UIndex||0)+1)%s.length;window.__currentM3UIndex=t;const n=s[t];return a.info(`Moving to next track: ${n.title}`),n.url}function M(){return!window.__currentM3UPlaylist||window.__currentM3UPlaylist.length===0?null:{playlist:window.__currentM3UPlaylist,index:window.__currentM3UIndex||0}}class S{constructor(e){this.logLevel="error",e&&(this.logLevel=e)}setLevel(e){this.logLevel=e}debug(...e){this.shouldLog("debug")&&console.log("[RPlayer]",...e)}info(...e){this.shouldLog("info")&&console.log("[RPlayer]",...e)}warn(...e){this.shouldLog("warn")&&console.warn("[RPlayer]",...e)}error(...e){this.shouldLog("error")&&console.error("[RPlayer]",...e)}shouldLog(e){if(this.logLevel==="none")return!1;const t=["error","warn","info","debug"],n=t.indexOf(this.logLevel);return t.indexOf(e)<=n}}const r=class r extends Audio{constructor(e){super(),this.shouldAutoReconnect=!1,this.hls=null,this.isHls=!1,this.lastSrc="",this.errorHandlers=[],this.playbackHandlers=[],this.loadingHandlers=[],this.handleReconnect=()=>{this.shouldAutoReconnect&&this.lastSrc&&(this.playSrc(this.lastSrc).catch(t=>{r.logger.warn("Auto-reconnect failed:",t)}),this.shouldAutoReconnect=!1)},this.handleOffline=()=>{r.logger.warn("Offline detected")},typeof window<"u"&&(window.addEventListener("online",this.handleReconnect),window.addEventListener("offline",this.handleOffline)),this.volume=1,this.addEventListener("error",()=>{const t=new Error(`Media error: ${this.error?.code??"unknown"}`);this.errorHandlers.forEach(n=>n(t)),this.loadingHandlers.forEach(n=>n("error",`Media error: ${this.error?.code??"unknown"}`))}),this.addEventListener("play",()=>{this.playbackHandlers.forEach(t=>t("playing"))}),this.addEventListener("pause",()=>{this.playbackHandlers.forEach(t=>t("paused"))}),this.addEventListener("loadstart",()=>{this.loadingHandlers.forEach(t=>t("loading","Starting to load media..."))}),this.addEventListener("waiting",()=>{this.loadingHandlers.forEach(t=>t("buffering","Buffering media..."))}),this.addEventListener("stalled",()=>{this.loadingHandlers.forEach(t=>t("buffering","Connection stalled. Waiting..."))}),this.addEventListener("canplay",()=>{this.loadingHandlers.forEach(t=>t("ready","Ready to play"))}),this.addEventListener("canplaythrough",()=>{this.loadingHandlers.forEach(t=>t("ready","Can play through without buffering"))}),e&&setTimeout(()=>{this.playSrc(e).catch(t=>{r.logger.error("Failed to play initial source:",t)})},0)}static setLogLevel(e){r.logger.setLevel(e)}static getLogLevel(){return r.logger.logLevel}isHlsUrl(e){const t=e.toString();try{return t.startsWith("http://")||t.startsWith("https://")?new URL(t).pathname.endsWith(".m3u8"):t.split("?")[0].endsWith(".m3u8")}catch{return r.logger.warn("URL parsing failed in isHlsUrl, using fallback check:",t),/\.m3u8($|\?)/.test(t)}}isM3uUrl(e){const t=e.toString();try{if(t.startsWith("http://")||t.startsWith("https://")){const i=new URL(t).pathname;return i.endsWith(".m3u")&&!i.endsWith(".m3u8")}const n=t.split("?")[0];return n.endsWith(".m3u")&&!n.endsWith(".m3u8")}catch{return r.logger.warn("URL parsing failed in isM3uUrl, using fallback check:",t),/\.m3u($|\?)/.test(t)&&!/\.m3u8($|\?)/.test(t)}}get isIOS(){return/iPad|iPhone|iPod/.test(navigator.userAgent)&&!("MSStream"in window)}get isHlsjs(){return this.isHls}get isPlaying(){return!this.paused}get url(){return this.lastSrc}onPlaybackStatusChange(e){this.playbackHandlers.push(e)}onError(e){const t=n=>{this.shouldAutoReconnect=!0,e(n)};this.errorHandlers.push(t)}removePlaybackStatusHandler(e){const t=this.playbackHandlers.indexOf(e);t!==-1&&this.playbackHandlers.splice(t,1)}removeErrorHandler(e){const t=this.errorHandlers.indexOf(e);t!==-1&&this.errorHandlers.splice(t,1)}onLoadingStatusChange(e){this.loadingHandlers.push(e)}removeLoadingStatusHandler(e){const t=this.loadingHandlers.indexOf(e);t!==-1&&this.loadingHandlers.splice(t,1)}async playSrc(e){if(r.logger.info(`playSrc called with: ${e}`),this.loadingHandlers.forEach(t=>t("loading",`Loading source: ${e}`)),e.startsWith("/")&&!e.startsWith("//")&&typeof window<"u"&&(e=`${window.location.origin}${e}`,r.logger.info(`Relative URL converted to absolute: ${e}`)),this.lastSrc===e&&this.paused&&this.currentTime>0)try{r.logger.info(`Same source detected, resuming playback: ${e}`),await this.play();return}catch(t){r.logger.warn("Error resuming playback, attempting to reload",t)}try{this.stop();const t=this.isHlsUrl(e),n=this.isM3uUrl(e),o=t?"HLS":n?"M3U standard":"Direct";if(r.logger.info(`Source type: ${o}`),t){r.logger.info(`Playing HLS stream: ${e}`);try{const i=L(this,e);return this.hls=i,this.lastSrc=e,this.isHls=!0,new Promise((d,l)=>{const u=()=>{r.logger.info("HLS playback started successfully"),this.removeEventListener("playing",u),this.removeEventListener("canplay",h),this.removeEventListener("error",g),clearTimeout(w),d()},h=()=>{r.logger.info("HLS stream can be played now"),this.paused&&(r.logger.info("Auto-starting HLS playback from canplay event"),this.play().catch(v=>r.logger.warn("Auto-play from canplay failed:",v)))},g=()=>{r.logger.error("HLS playback error occurred"),this.removeEventListener("playing",u),this.removeEventListener("canplay",h),this.removeEventListener("error",g),clearTimeout(w),l(new Error(`Failed to load HLS source: ${e}`))};if(!this.paused&&this.readyState>=3){r.logger.info("HLS playback already started, resolving immediately"),d();return}r.logger.info("Waiting for HLS playback to start..."),this.addEventListener("playing",u),this.addEventListener("canplay",h),this.addEventListener("error",g);let c=0;const f=5,U=()=>(c++,this.paused?(c<=2?r.logger.debug(`HLS playback initiating, attempt ${c}/${f}`):r.logger.info(`HLS playback retry ${c}/${f}`),c<=f?(this.play().catch(()=>{r.logger.debug(`Retrying playback, attempt ${c}...`)}),!0):(r.logger.info("HLS auto-play attempts complete, waiting for user interaction"),!1)):!1),w=setTimeout(function v(){U()&&setTimeout(v,1e3*Math.min(2**(c-1),10))},1e3)})}catch(i){throw r.logger.error("Error initializing HLS playback:",i),i}}else if(this.isM3uUrl(e))try{r.logger.info(`Attempting to play M3U standard playlist: ${e}`);const i=await E(this,e);if(r.logger.info(`URL extracted from M3U playlist: ${i}`),i===e)throw new Error("The URL extracted from the playlist is identical to the playlist URL");return this.lastSrc=e,r.logger.info(`Redirecting to: ${i}`),this.playSrc(i)}catch(i){r.logger.error("Error while playing M3U playlist:",i);const d=i instanceof Error?i:new Error(`Failed to parse M3U playlist: ${String(i)}`);throw this.errorHandlers.forEach(l=>l(d)),d}else return r.logger.info(`Attempting direct playback: ${e}`),this.src=e,this.lastSrc=e,this.isHls=!1,new Promise((i,d)=>{const l=async()=>{this.removeEventListener("canplay",l),this.removeEventListener("error",u);try{await Promise.resolve(),await this.play(),r.logger.info("Direct playback successful"),i()}catch(h){r.logger.error("Error during direct playback:",h);const g=new Error(`Failed to play source: ${e}`);this.errorHandlers.forEach(c=>c(g)),d(g)}},u=()=>{this.removeEventListener("canplay",l),this.removeEventListener("error",u);const h=new Error(`Failed to load source: ${e}`);this.errorHandlers.forEach(g=>g(h)),d(h)};this.addEventListener("canplay",l,{once:!0}),this.addEventListener("error",u,{once:!0}),this.load()})}catch(t){throw r.logger.error("Error playing source",t),this.errorHandlers.forEach(n=>n(t instanceof Error?t:new Error(String(t)))),t}}async loadSrc(e){r.logger.info(`loadSrc called with: ${e}`),e.startsWith("/")&&!e.startsWith("//")&&typeof window<"u"&&(e=`${window.location.origin}${e}`,r.logger.info(`Relative URL converted to absolute: ${e}`));try{this.stop();const t=this.isHlsUrl(e),n=this.isM3uUrl(e),o=t?"HLS":n?"M3U standard":"Direct";if(r.logger.info(`Source type: ${o}`),t)try{const i=L(this,e);return this.hls=i,this.lastSrc=e,this.isHls=!0,Promise.resolve()}catch(i){throw r.logger.error("Error initializing HLS source:",i),i}else if(this.isM3uUrl(e))try{r.logger.info(`Attempting to load M3U standard playlist: ${e}`);const i=await E(this,e);if(r.logger.info(`URL extracted from M3U playlist: ${i}`),i===e)throw new Error("The URL extracted from the playlist is identical to the playlist URL");return this.lastSrc=e,this.loadSrc(i)}catch(i){r.logger.error("Error while loading M3U playlist:",i);const d=i instanceof Error?i:new Error(`Failed to parse M3U playlist: ${String(i)}`);throw this.errorHandlers.forEach(l=>l(d)),d}else return r.logger.info(`Loading direct without playback: ${e}`),this.src=e,this.lastSrc=e,this.isHls=!1,new Promise((i,d)=>{const l=()=>{this.removeEventListener("loadedmetadata",l),this.removeEventListener("error",u),i()},u=()=>{this.removeEventListener("loadedmetadata",l),this.removeEventListener("error",u);const h=new Error(`Failed to load source: ${e}`);this.errorHandlers.forEach(g=>g(h)),d(h)};this.addEventListener("loadedmetadata",l,{once:!0}),this.addEventListener("error",u,{once:!0}),this.load()})}catch(t){throw r.logger.error("Error loading source",t),this.errorHandlers.forEach(n=>n(t instanceof Error?t:new Error(String(t)))),t}}stop(){this.pause(),this.currentTime=0,this.hls&&(this.hls.destroy(),this.hls=null),this.isHls=!1,this.shouldAutoReconnect=!!this.lastSrc,this.playbackHandlers.forEach(e=>e("stopped")),this.shouldAutoReconnect=!1}rewind(e){this.currentTime=Math.max(this.currentTime-e,0)}upVolume(){this.setVolume(this.volume+.1)}downVolume(){this.setVolume(this.volume-.1)}setVolume(e){const t=Math.max(0,Math.min(1,e));this.volume=parseFloat(t.toFixed(2))}mute(){this.muted=!this.muted}async playM3u(e){try{return await this.playSrc(e),this.lastSrc}catch(t){throw r.logger.error("Error playing M3U playlist:",t),t}}async previous(){try{const e=await H();return this.playSrc(e)}catch(e){throw r.logger.error("Error playing previous track:",e),e}}async next(){try{const e=await b();return this.playSrc(e)}catch(e){throw r.logger.error("Error playing next track:",e),e}}getCurrentPlaylist(){return M()}destroy(){this.stop(),typeof window<"u"&&(window.removeEventListener("online",this.handleReconnect),window.removeEventListener("offline",this.handleOffline)),this.playbackHandlers.length=0,this.errorHandlers.length=0,this.loadingHandlers.length=0}};r.logger=new S;let m=r;const a=m.logger;typeof window<"u"&&(window.RPlayer=m),y.Logger=S,y.default=m,y.logger=a,Object.defineProperties(y,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}})});
//# sourceMappingURL=rplayer.umd.min.js.map
