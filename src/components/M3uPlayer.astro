<section class="">
  <div id="player-container" class="flex flex-col gap-4 items-center justify-center">
    <div class="w-full max-w-md mx-auto">
      <div class="flex items-center justify-center my-4 gap-4">
        <button
          id="playButton"
          class="px-4 py-2 rounded border-2 font-bold transition-colors cursor-pointer border-green-500 text-green-400 hover:bg-green-600 hover:text-black focus:outline-none focus:ring-2 focus:ring-green-400 focus:ring-opacity-50">
          Play mini-radio.m3u
        </button>
        <button
          id="stopButton"
          class="px-4 py-2 rounded border-2 font-bold transition-colors cursor-pointer border-red-500 text-red-400 hover:bg-red-600 hover:text-black focus:outline-none focus:ring-2 focus:ring-red-400 focus:ring-opacity-50">
          Stop
        </button>
      </div>
      <div id="status" class="text-center text-white bg-secondary rounded p-4 font-semibold">
        Status: Ready
      </div>
      <div id="currentTrack" class="mt-4 text-center font-medium hidden"></div>
      <div id="station-controls" class="mt-4 hidden">
        <div class="flex justify-center space-x-4 items-center gap-4">
          <button
            id="prevButton"
            class="px-4 py-2 rounded border-2 font-bold transition-colors cursor-pointer border-pink-500 text-pink-400 hover:bg-pink-600 hover:text-black focus:outline-none focus:ring-2 focus:ring-pink-400 focus:ring-opacity-50">
            Previous
          </button>
          <div id="station-count" class="text-sm font-medium"></div>
          <button
            id="nextButton"
            class="px-4 py-2 rounded border-2 font-bold transition-colors cursor-pointer border-purple-500 text-purple-400 hover:bg-purple-600 hover:text-black focus:outline-none focus:ring-2 focus:ring-purple-400 focus:ring-opacity-50">
            Next
          </button>
        </div>
      </div>
    </div>
    <div class="mt-4 text-sm w-full flex flex-col gap-4">
      <details class="w-full">
        <summary class="cursor-pointer hover:text-primary-600 font-medium text-white bg-secondary rounded p-4 select-none w-full focus:outline-none focus:ring-2 focus:ring-blue-400">View Playlist Content</summary>
        <div class="mt-2 w-full">
          <label for="playlist-content" class="block text-xs font-medium text-gray-300 mb-4">Playlist Content (.m3u)</label>
          <textarea id="playlist-content" rows="8" class="w-full p-4 rounded bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 border-2 border-gray-400 shadow-inner font-mono text-xs mb-3" aria-label="Playlist content" readonly></textarea>
        </div>
      </details>
      <details class="w-full">
        <summary class="cursor-pointer hover:text-primary-600 font-medium text-white bg-secondary rounded p-4 select-none w-full focus:outline-none focus:ring-2 focus:ring-blue-400">Debug Information</summary>
        <div class="p-4 bg-gray-900 rounded mt-4 overflow-auto max-h-48 w-full">
          <pre id="debug-log"></pre>
        </div>
      </details>
    </div>
  </div>
</section>

<script>
import RPlayer from '../lib/index.js';

// Extend RPlayer with additional methods
declare global {
  interface Window {
    __currentM3UPlaylist?: Array<{ title: string; url: string }>;
    __currentM3UIndex?: number;
  }
}

// Wait for the DOM to be fully loaded before running the player logic
document.addEventListener('DOMContentLoaded', () => {
  // Get DOM elements
  const playButton = document.getElementById('playButton');
  const stopButton = document.getElementById('stopButton');
  const statusElement = document.getElementById('status');
  const currentTrackElement = document.getElementById('currentTrack');
  const debugLogElement = document.getElementById('debug-log');
  // Elements for station navigation
  const stationControlsElement = document.getElementById('station-controls');
  const stationCountElement = document.getElementById('station-count');
  const prevButton = document.getElementById('prevButton');
  const nextButton = document.getElementById('nextButton');

  // Add a logging function for debugging
  const addDebugLog = (message: string, type: 'info' | 'error' = 'info') => {
    if (debugLogElement) {
      const timestamp = new Date().toLocaleTimeString();
      debugLogElement.textContent += `[${timestamp}] [${type.toUpperCase()}] ${message}\n`;
      debugLogElement.scrollTop = debugLogElement.scrollHeight;
    }
    if (type === 'info') {
      console.log(message);
    } else {
      console.error(message);
    }
  };

  // Verify DOM elements
  if (!playButton || !stopButton || !statusElement || !currentTrackElement) {
    console.error("Some DOM elements were not found", {
      playButton: !!playButton,
      stopButton: !!stopButton,
      statusElement: !!statusElement,
      currentTrackElement: !!currentTrackElement
    });
  }

  let player: RPlayer | null = null;

  // Update the status message in the UI and log it
  const updateStatus = (message: string) => {
    if (statusElement) {
      statusElement.textContent = `Status: ${message}`;
    }
    addDebugLog(`Status updated: ${message}`);
  };

  // Show the current track in the UI
  const showCurrentTrack = (track: string) => {
    if (currentTrackElement) {
      currentTrackElement.textContent = `Now playing: ${track}`;
      currentTrackElement.classList.remove('hidden');
    }
  };

  // Hide the current track display
  const hideCurrentTrack = () => {
    if (currentTrackElement) {
      currentTrackElement.classList.add('hidden');
    }
  };

  // Show navigation controls between stations
  const showStationControls = () => {
    if (stationControlsElement) {
      stationControlsElement.classList.remove('hidden');
    }
    updateStationInfo();
  };

  // Hide navigation controls between stations
  const hideStationControls = () => {
    if (stationControlsElement) {
      stationControlsElement.classList.add('hidden');
    }
  };

  // Update station information display
  const updateStationInfo = () => {
    if (!stationCountElement || !window.__currentM3UPlaylist) return;

    const currentIndex = window.__currentM3UIndex || 0;
    const totalCount = window.__currentM3UPlaylist.length;
    stationCountElement.textContent = `Station ${currentIndex + 1}/${totalCount}`;
  };

  // Update MediaSession API with current track info and navigation controls
  const updateMediaSession = () => {
    const playlist = window.__currentM3UPlaylist || [];
    if (playlist.length === 0) return;

    const currentIndex = window.__currentM3UIndex || 0;
    const station = playlist[currentIndex];

    // Update MediaSession metadata and navigation handlers
    if ('mediaSession' in navigator) {
      navigator.mediaSession.metadata = new MediaMetadata({
        title: station.title,
        artist: 'Mini Radio Playlist',
        album: 'Mini Radio',
        artwork: [
          { src: '/images/mini-radio-256x256.png', sizes: '256x256', type: 'image/png' },
          { src: '/images/mini-radio-96x96.png', sizes: '96x96', type: 'image/png' },
          { src: '/images/mini-radio-128x128.png', sizes: '128x128', type: 'image/png' }
        ]
      });

      // Add MediaSession navigation actions
      navigator.mediaSession.setActionHandler('previoustrack', () => {
        if (player && playlist.length > 1) {
          player.previous();
          addDebugLog(`Previous track requested`);
          updateStationInfo();
        }
      });

      navigator.mediaSession.setActionHandler('nexttrack', () => {
        if (player && playlist.length > 1) {
          player.next();
          addDebugLog(`Next track requested`);
          updateStationInfo();
        }
      });
    }
  };

  // Helper function to update UI after playlist is loaded
  const updatePlayerUI = () => {
    const playlist = window.__currentM3UPlaylist || [];
    if (playlist.length > 0) {
      const currentIndex = window.__currentM3UIndex || 0;
      const currentStation = playlist[currentIndex];

      // Update the UI
      updateStatus('Playing');
      showCurrentTrack(currentStation.title);
      showStationControls();
      addDebugLog(`Now playing: ${currentStation.title}`);

      // Update MediaSession API
      updateMediaSession();
    }
  };

  // Note: No need to extend RPlayer, the methods are now native
  const initializePlayer = (player: RPlayer) => {
    // Log that we're using native methods
    console.log('Using native RPlayer methods for M3U playlist playback');
    addDebugLog('RPlayer now has native M3U playlist support');

    return player;
  };

  // Initialize the RPlayer instance and set up event listeners
  const initPlayer = () => {
    if (player) {
      player.stop();
    }

    // Create new RPlayer instance
    let newPlayer = new RPlayer();

    // Initialize the player (no need to extend anymore as methods are now native)
    newPlayer = initializePlayer(newPlayer);    // Set volume from localStorage if available, otherwise use default 0.5
    try {
      // @ts-ignore
      import('/src/utils/storage.js').then(({ getVolume, setVolume }) => {
        const volume = getVolume();
        newPlayer.volume = volume;
        setVolume(volume); // Save back if cookies accepted
      }).catch(() => {
        newPlayer.volume = 0.5;
      });
    } catch (e) {
      newPlayer.volume = 0.5;
    }

    // Setup event listeners
    newPlayer.addEventListener('playing', () => {
      updateStatus('Playing');

      // Get current track information from the global window object
      const playlist = window.__currentM3UPlaylist || [];
      const currentIndex = window.__currentM3UIndex || 0;

      if (playlist[currentIndex]) {
        showCurrentTrack(playlist[currentIndex].title || newPlayer.url);
      } else {
        showCurrentTrack(newPlayer.url);
      }

      // Show station controls if we have a playlist
      if (playlist.length > 1) {
        showStationControls();
        // Update MediaSession when playback starts
        updateMediaSession();
      }
    });

    newPlayer.addEventListener('pause', () => {
      updateStatus('Paused');
    });

    newPlayer.addEventListener('error', (e: Event) => {
      console.error('Player error:', e);
      updateStatus('Error: Unable to play playlist');
      addDebugLog(`Audio player error: ${e.type}`, 'error');
    });

    newPlayer.onPlaybackStatusChange((status: string) => {
      updateStatus(`Status: ${status}`);
    });

    newPlayer.onError((err: Error) => {
      console.error('RPlayer error:', err);
      updateStatus(`Error: ${err.message}`);
      addDebugLog(`RPlayer error: ${err.message}`, 'error');
    });

    return newPlayer;
  };

  // Add event handlers for navigation buttons
  prevButton?.addEventListener('click', () => {
    if (player && window.__currentM3UPlaylist && window.__currentM3UPlaylist.length > 1) {
      addDebugLog(`Previous button clicked`);
      // Use the previous method directly on the player
      (player as any).previous();
      updateStationInfo();
      updateMediaSession();
    }
  });

  nextButton?.addEventListener('click', () => {
    if (player && window.__currentM3UPlaylist && window.__currentM3UPlaylist.length > 1) {
      addDebugLog(`Next button clicked`);
      // Use the next method directly on the player
      (player as any).next();
      updateStationInfo();
      updateMediaSession();
    }
  });

  stopButton?.addEventListener('click', () => {
    if (player) {
      player.stop();
      updateStatus('Stopped');
      hideCurrentTrack();
      hideStationControls();
      addDebugLog('Playback stopped by user');
    }
  });

  // Add logic to load playlist content for display only
  const playlistTextarea = document.getElementById('playlist-content') as HTMLTextAreaElement;

  // Function to load the .m3u file content into the textarea
  const fetchAndShowPlaylist = async () => {
    try {
      const res = await fetch('https://rplayer.js.org/mini-radio.m3u');
      if (!res.ok) throw new Error('Failed to fetch playlist');
      const text = await res.text();
      if (playlistTextarea) playlistTextarea.value = text;
      addDebugLog('Playlist loaded into textarea for viewing');
    } catch (err) {
      addDebugLog('Error loading playlist: ' + (err instanceof Error ? err.message : err), 'error');
    }
  };

  // Load playlist content on page load
  fetchAndShowPlaylist();

  // Play button: fetch and play the default M3U file
  playButton?.addEventListener('click', async () => {
    try {
      // Initialize player if needed
      if (!player) {
        player = initPlayer();
      }

      // Use the playM3u method directly
      await (player as any).playM3u('/mini-radio.m3u');
      addDebugLog('Playing default mini-radio.m3u playlist');

      // Update UI based on playlist info
      updatePlayerUI();
    } catch (error) {
      const errorMsg = error instanceof Error ? error.message : 'Unknown error';
      addDebugLog(`Error playing playlist: ${errorMsg}`, 'error');
      updateStatus(`Error: ${errorMsg}`);
    }
  });
});
</script>
