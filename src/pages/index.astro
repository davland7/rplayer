---
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import Layout from "../layouts/Layout.astro";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import MarkdownSection from "../components/MarkdownSection.astro";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import RadioSearch from "../components/RadioSearch/index.js";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as HomeContent } from "../content/home.md";
import "flag-icons/css/flag-icons.min.css";

// Radio Browser API configuration
const API_BASE = "https://de1.api.radio-browser.info/json";

type Tag = { name: string; stationcount?: number };

async function fetchPopularTags(limit: number = 20): Promise<Tag[]> {
	try {
		const response = await fetch(`${API_BASE}/tags?order=stationcount&reverse=true&limit=${limit}`);
		if (!response.ok) throw new Error("Failed to load tags");
		return await response.json();
	} catch (error) {
		console.error("Failed to load tags:", error);
		return [];
	}
}

interface GenreCountryItem {
	code: string;
	name: string;
	search: "country" | "tag" | "saved";
}

async function fetchPopularGenresAndCountries(limit: number = 20): Promise<GenreCountryItem[]> {
	// Fetch countries and tags, then merge and normalize
	try {
		const [tags, countries] = await Promise.all([
			fetchPopularTags(limit),
			(async () => {
				const response = await fetch(
					`${API_BASE}/countries?order=stationcount&reverse=true&limit=${limit}`,
				);
				if (!response.ok) throw new Error("Failed to load countries");
				return await response.json();
			})(),
		]);
		// Normalize countries
		type Country = { iso_3166_1?: string; name: string };
		const countryItems: GenreCountryItem[] = (countries || []).map((c: Country) => ({
			code: c.iso_3166_1?.toLowerCase() || "",
			name: c.name,
			search: "country",
		}));
		// Normalize tags
		const tagItems: GenreCountryItem[] = (tags || []).map((t: { name: string }) => ({
			code: "",
			name: t.name,
			search: "tag",
		}));
		// Merge, alphabetical sort (includes special "Saved" tag)
		const combined: GenreCountryItem[] = [
			...countryItems,
			...tagItems,
			{ code: "", name: "Saved", search: "saved" as const },
		].sort((a, b) => a.name.localeCompare(b.name));
		return combined;
	} catch (error) {
		console.error("Failed to load genres/countries:", error);
		// Static fallback if error
		return [
			{ code: "us", name: "United States", search: "country" },
			{ code: "fr", name: "France", search: "country" },
			{ code: "", name: "rock", search: "tag" },
			{ code: "", name: "pop", search: "tag" },
			{ code: "", name: "Saved", search: "saved" },
		];
	}
}

const SEARCH_PARAMS: Record<string, string> = {
	order: "clickcount",
	limit: "100",
	reverse: "true",
	hidebroken: "true",
	offset: "0",
};

function buildParams(params: Record<string, string>): string {
	return Object.entries(params)
		.map(([k, v]) => `${encodeURIComponent(k)}=${encodeURIComponent(v)}`)
		.join("&");
}

// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
const preloadedStations = await fetch(
	`${API_BASE}/stations/search?tag=dance&${buildParams(SEARCH_PARAMS)}`,
).then((r) => r.json());
// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
const preloadedGenresCountries = await fetchPopularGenresAndCountries(20);
// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
const initialTag = "dance";
---

<Layout
  title="RPlayer - Audio Player for Streaming Radio"
  description="RPlayer is a lightweight audio player for streaming radio that supports HLS streams, MP3, AAC and more formats."
  currentPage="home"
>
  <MarkdownSection>
    <HomeContent />
  </MarkdownSection>

  <RadioSearch
    client:only="react"
    preloadedStations={preloadedStations}
    preloadedGenresCountries={preloadedGenresCountries}
    initialTag={initialTag}
    apiBase={API_BASE}
    searchParams={SEARCH_PARAMS}
    initialVisibleCount={10}
  />
</Layout>
