---
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import Layout from "../../layouts/Layout.astro";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import MarkdownSection from "../../components/MarkdownSection.astro";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import RadioSearch from "../../components/RadioSearch/RadioSearch";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import ItemsList from "../../components/ItemsList.astro";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import CategoryCard from "../../components/CategoryCard.astro";

// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as SearchContent } from "../../content/search.md";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as CountryContent } from "../../content/country.md";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as TagContent } from "../../content/tag.md";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as StationsContent } from "../../content/stations.md";

import { fetchTerms, fetchStationsByTerm, SearchType } from "../../utils/api.js";
import type { Term, RadioStation } from "../../utils/api.js";
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import Breadcrumb from "../../components/Breadcrumb.astro";

interface BreadcrumbItem {
	label: string;
	href?: string;
}

interface SearchPageProps {
	type: string;
	title: string;
	description: string;
	keywords: string;
	preloadedCategories?: Term[];
	preloadedStations?: RadioStation[];
	breadcrumbItems?: BreadcrumbItem[];
}

// Enable prerendering for this page
// This allows the page to be generated at build time for better performance
export const prerender = true;

// 1. getStaticPaths runs at build time
export async function getStaticPaths() {
	// Define available categories
	const categories = [
		{ type: SearchType.Country, name: "Country", slug: "country" },
		{ type: SearchType.Tag, name: "Tag", slug: "tag" },
	];

	const limitStations = 128; // Limit the number of stations per page
	const paths = [];
	const indexBreadcrumb = [{ label: "Search" }];
	// Fetch all category data in a single request
	const categoriesData = await fetchTerms(16);

	// 1. Main index page (route: /search)
	paths.push({
		params: { slug: undefined },
		props: {
			type: "index",
			title: "RPlayer - Explore radio stations",
			description: "Discover radio stations by country and tags",
			keywords: "radio, streaming, country, tags, stations",
			preloadedCategories: categories,
			preloadedStations: [],
			breadcrumbItems: indexBreadcrumb,
		},
	});

	// 2. Process each category type
	for (const category of categories) {
		const { slug, type, name } = category;
		// Filter categories by type (Country or Tag)
		const filteredCategories = categoriesData.filter((item) => item.type === type);

		const categoryBreadcrumb = [{ label: "Search", href: "/search" }, { label: name }];

		// Category index page (route: /search/country or /search/tag)
		paths.push({
			params: { slug },
			props: {
				type,
				title: `Stations by ${name} - RPlayer`,
				description: `Browse radio stations by ${name}`,
				keywords: `radio, streaming, ${name}, stations`,
				preloadedCategories: filteredCategories,
				preloadedStations: [],
				breadcrumbItems: categoryBreadcrumb,
			},
		});

		// 3. Detail pages for each category item
		// (route: /search/country/[slug] or /search/tag/[slug])
		for (const item of filteredCategories) {
			const preloadedStations = await fetchStationsByTerm({
				term: item.name,
				type,
				limit: limitStations,
			});

			const detailBreadcrumb = [
				{ label: "Search", href: "/search" },
				{ label: name, href: `/search/${slug}` },
				{ label: item.name },
			];
			paths.push({
				params: { slug: `${slug}/${item.slug}` },
				props: {
					type: "stations",
					title: `Stations by ${item.name} - RPlayer`,
					description: `Browse radio stations by ${item.name}`,
					keywords: `radio, streaming, ${item.name}, stations`,
					preloadedCategories: filteredCategories,
					preloadedStations,
					breadcrumbItems: detailBreadcrumb,
				},
			});
		}
	}

	return paths;
}

const {
	type,
	// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
	title,
	// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
	description,
	// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
	keywords,
	// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
	preloadedCategories = [],
	// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
	preloadedStations = [],
	// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
	breadcrumbItems,
}: SearchPageProps = Astro.props;

// Determine the schema type based on the page type
const getSchemaType = () => {
	if (type === "stations") return "MusicPlaylist";
	if (type === SearchType.Country || type === SearchType.Tag) return "CollectionPage";
	return "WebPage";
};

// biome-ignore lint/correctness/noUnusedVariables: Used in Astro template
const schemaType = getSchemaType();
---

<Layout
  title={title}
  description={description}
  keywords={keywords}
  currentPage="search"
>
  <Breadcrumb items={breadcrumbItems} />

  {/* Schema.org structured data */}
  <div itemscope itemtype={`https://schema.org/${schemaType}`}>
    {/* Add generic WebPage properties */}
    <meta itemprop="name" content={title} />
    <meta itemprop="description" content={description} />
    <meta itemprop="keywords" content={keywords} />

    {/* Main index page with category types (Country and Tag) */}
    {type === 'index' && (
      <>
        <div itemscope itemtype="https://schema.org/WebPage">
          <MarkdownSection>
            <SearchContent />
          </MarkdownSection>
          {preloadedCategories.length > 0 && (
            <div class="mt-6 grid grid-cols-2 gap-4">
              <div itemscope itemtype="https://schema.org/ItemList" style="display: none;">
                <meta itemprop="numberOfItems" content={preloadedCategories.length.toString()} />
              </div>
              {preloadedCategories.map((category, index) => (
                <div itemscope itemtype="https://schema.org/SiteNavigationElement">
                  <meta itemprop="position" content={(index + 1).toString()} />
                  <CategoryCard
                    name={category.name}
                    slug={category.slug}
                    basePath="/search"
                  />
                  <meta itemprop="name" content={category.name} />
                </div>
              ))}
            </div>
          )}
        </div>
      </>
    )}

    {/* Country category index page */}
    {type === SearchType.Country && (
      <>
        <MarkdownSection>
          <CountryContent />
        </MarkdownSection>
        <div itemprop="mainEntity" itemscope itemtype="https://schema.org/ItemList">
          <meta itemprop="name" content="Countries List" />
          <meta itemprop="numberOfItems" content={preloadedCategories.length.toString()} />
          <ItemsList
            items={preloadedCategories}
            basePath="/search/country"
            ariaLabel="Countries"
          />
        </div>
      </>
    )}

    {/* Tag category index page */}
    {type === SearchType.Tag && (
      <>
        <MarkdownSection>
          <TagContent />
        </MarkdownSection>
        <div itemprop="mainEntity" itemscope itemtype="https://schema.org/ItemList">
          <meta itemprop="name" content="Tags List" />
          <meta itemprop="numberOfItems" content={preloadedCategories.length.toString()} />
          <ItemsList
            items={preloadedCategories}
            basePath="/search/tag"
            ariaLabel="Tags"
          />
        </div>
      </>
    )}

    {/* Detail page with stations */}
    {type === 'stations' && (
      <>
        <MarkdownSection>
          <StationsContent />
        </MarkdownSection>
        <div itemprop="mainEntity">
          {/* React component with client-side hydration only */}
          <meta itemprop="numTracks" content={preloadedStations.length.toString()} />
          <RadioSearch
            client:only="react"
            initialVisibleCount={8}
            preloadedStations={preloadedStations}
          />
        </div>
      </>
    )}
  </div>
</Layout>
