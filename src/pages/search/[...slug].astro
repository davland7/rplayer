---
import Layout from '../../layouts/Layout.astro';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import MarkdownSection from '../../components/MarkdownSection.astro';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import RadioSearch from '../../components/RadioSearch/RadioSearch';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import ItemsList from '../../components/ItemsList.astro';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import CategoryCard from '../../components/CategoryCard.astro';

// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as SearchContent } from '../../content/search.md';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as CountryContent } from '../../content/country.md';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as TagContent } from '../../content/tag.md';
// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import { Content as StationsContent } from '../../content/stations.md';

// biome-ignore lint/correctness/noUnusedImports: Used in Astro template
import {
  Term,
  fetchTerms,
  fetchStationsByTerm,
  type RadioStation,
  SearchType
} from "../../utils/api.js";

interface SearchPageProps {
  type: string;
  title: string;
  description: string;
  keywords: string;
  preloadedCategories?: Term[];
  preloadedStations?: RadioStation[];
  limitVisibleStations?: number; // Optional prop to control initial visible stations
}

// Enable prerendering for this page
// This allows the page to be generated at build time for better performance
export const prerender = true;

// 1. getStaticPaths runs at build time
export async function getStaticPaths() {
  // Define available categories
  const categories = [
    { type: SearchType.Country, name: 'Country', slug: 'country' },
    { type: SearchType.Tag, name: 'Tag', slug: 'tag' }
  ];

  const limitStations = 16; // Limit the number of stations per page
  const limitVisibleStations = 8; // Limit the number of stations visible initially
  const paths = [];

  // Fetch all category data in a single request
  const categoriesData = await fetchTerms(2);

  // 1. Main index page (route: /search)
  paths.push({
    params: { slug: undefined },
    props: {
      type: 'index',
      title: 'RPlayer - Explore radio stations',
      description: 'Discover radio stations by country and tags',
      keywords: 'radio, streaming, country, tags, stations',
      preloadedCategories: categories,
      preloadedStations: []
    }
  });

  // 2. Process each category type
  for (const category of categories) {
    const { slug, type, name } = category;
    // Filter categories by type (Country or Tag)
    const filteredCategories = categoriesData.filter(item => item.type === type);

    // Category index page (route: /search/country or /search/tag)
    paths.push({
      params: { slug },
      props: {
        type,
        title: `Stations by ${name} - RPlayer`,
        description: `Browse radio stations by ${name}`,
        keywords: `radio, streaming, ${name}, stations`,
        preloadedCategories: filteredCategories,
        preloadedStations: []
      }
    });

    // 3. Detail pages for each category item
    // (route: /search/country/[slug] or /search/tag/[slug])
    for (const item of filteredCategories) {
      const preloadedStations = await fetchStationsByTerm({
        term: item.name,
        type,
        limit: limitStations
      });

      paths.push({
        params: { slug: `${slug}/${item.slug}` },
        props: {
          type: 'stations',
          title: `Stations by ${item.name} - RPlayer`,
          description: `Browse radio stations by ${item.name}`,
          keywords: `radio, streaming, ${item.name}, stations`,
          preloadedCategories: filteredCategories,
          preloadedStations,
          limitVisibleStations
        }
      });
    }
  }

  return paths;
}

const { type, title, description, keywords, preloadedCategories = [], preloadedStations = [], limitVisibleStations = 8 }: SearchPageProps = Astro.props;
---

<Layout
  title={title}
  description={description}
  keywords={keywords}
  currentPage="search"
>
  {/* Main index page with category types (Country and Tag) */}
  {type === 'index' && (
    <>
      <MarkdownSection>
        <SearchContent />
      </MarkdownSection>
      {preloadedCategories.length > 0 && (
        <div class="mt-6 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
          {preloadedCategories.map(category => (
            <CategoryCard
              name={category.name}
              slug={category.slug}
              basePath="/search"
            />
          ))}
        </div>
      )}
    </>
  )}

  {/* Country category index page */}
  {type === SearchType.Country && (
    <>
      <MarkdownSection>
        <CountryContent />
      </MarkdownSection>
      <ItemsList
        items={preloadedCategories}
        basePath="/search/country"
        ariaLabel="Countries"
      />
    </>
  )}

  {/* Tag category index page */}
  {type === SearchType.Tag && (
    <>
      <MarkdownSection>
        <TagContent />
      </MarkdownSection>
      <ItemsList
        items={preloadedCategories}
        basePath="/search/tag"
        ariaLabel="Tags"
      />
    </>
  )}

  {/* Detail page with stations */}
  {type === 'stations' && (
    <>
      <MarkdownSection>
        <StationsContent />
      </MarkdownSection>
      {/* React component with client-side hydration only */}
      <RadioSearch
        client:only="react"
        initialVisibleCount={limitVisibleStations}
        preloadedStations={preloadedStations}
      />
    </>
  )}
</Layout>
